// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        Int        @id @default(autoincrement())
  firstName String
  lastName  String
  email     String     @unique
  password  String
  avatar    String
  phone     String
  role      String
  templates Template[]
  blogPosts BlogPost[]
  comments  Comment[]
  votes     Vote[]
  reports   Report[]
}

model Template {
  id          Int        @id @default(autoincrement())
  title       String
  explanation String
  code        String
  language    String
  tags        String // Comma separated
  forked      Boolean    @default(false)
  userId      Int
  user        User       @relation(fields: [userId], references: [id])
  blogPosts   BlogPost[] @relation("BlogTemplates")
}

model BlogPost {
  id           Int        @id @default(autoincrement())
  title        String
  description  String
  tags         String
  templates    Template[] @relation("BlogTemplates")
  numUpvotes   Int        @default(0)
  numDownvotes Int        @default(0)
  userId       Int
  user         User       @relation(fields: [userId], references: [id])
  createdAt    DateTime   @default(now())
  comments     Comment[]  @relation("BlogComments")
  votes        Vote[]     @relation
  reports      Report[]   @relation
  hidden       Boolean    @default(false)
}

model Comment {
  id           Int       @id @default(autoincrement())
  content      String
  createdAt    DateTime  @default(now())
  userId       Int
  user         User      @relation(fields: [userId], references: [id])
  blogPostId   Int
  blogPost     BlogPost  @relation("BlogComments", fields: [blogPostId], references: [id], onDelete: Cascade) // Define onDelete here
  parentId     Int?
  parent       Comment?  @relation("ReplyRelation", fields: [parentId], references: [id])
  replies      Comment[] @relation("ReplyRelation")
  numUpvotes   Int       @default(0)
  numDownvotes Int       @default(0)
  votes        Vote[]
  reports      Report[]
  hidden       Boolean   @default(false)
}

model Vote {
  id         Int       @id @default(autoincrement())
  voteType   String
  userId     Int
  user       User      @relation(fields: [userId], references: [id])
  blogPostId Int? // The blog post being voted on (optional for comment votes)
  blogPost   BlogPost? @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  commentId  Int? // The comment being voted on (optional for blog post votes)
  comment    Comment?  @relation(fields: [commentId], references: [id])

  //these are taken from ChatGPT, ensures that each user can only vote once on a blog post or comment
  @@unique([userId, blogPostId], name: "user_blogpost_unique") // Ensure unique votes for blog posts
  @@unique([userId, commentId], name: "user_comment_unique") // Ensure unique votes for comments
}

model Report {
  id         Int       @id @default(autoincrement())
  reason     String
  userId     Int
  user       User      @relation(fields: [userId], references: [id])
  blogPostId Int?
  blogPost   BlogPost? @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  commentId  Int?
  comment    Comment?  @relation(fields: [commentId], references: [id])
}
